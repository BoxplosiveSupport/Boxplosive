@using nl.boxplosive.BackOffice.Mvc.Controllers
@using nl.boxplosive.BackOffice.Mvc.Helpers
@using nl.boxplosive.Configuration
@model nl.boxplosive.BackOffice.Mvc.Models.Shared.Loyalty.BasicStepModel

@{
    var hasBalanceMessagesErrors = Model.ErrorFieldNames.Contains("BalanceMessages");
}

<section class="datapanel">
    @Html.AntiForgeryToken()
    <div class="datapanel-heading">
        <h2>1. Basics</h2>
    </div>
    <div class="datapanel-body">
        <div class="form-horizontal">
            @Html.HiddenFor(m => m.IsContinuousSaving)
            @Html.EditorFor(m => m.Title)
            @Html.EditorFor(m => m.ProgramExternalId)
            @if (Model.StampTypeEnabled)
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.StampType, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.StampType, true, Model.StampTypes, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.StampType, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(m => m.StampType)
            }
            @Html.HiddenFor(m => m.AppCardStackDefinitionsEnabled)
            @if (Model.AppCardStackDefinitionsEnabled)
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.AppCardStackDefinitionId, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8 @Html.Raw(!ViewData.ModelState.IsValidField("AppCardStackDefinitionId") ? "has-error" : "")">
                        @Html.DropDownListFor(m => m.AppCardStackDefinitionId, true, Model.AppCardStackDefinitions, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AppCardStackDefinitionId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(m => m.AppCardStackDefinitionId)
            }
            @Html.EditorFor(m => m.AppCardOrder, "Numeric")
            @Html.HiddenFor(m => m.AppCardTemplateIdIsDisplayed)
            @if (Model.AppCardTemplateIdIsDisplayed)
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.AppCardTemplateId, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8 @Html.Raw(!ViewData.ModelState.IsValidField("AppCardTemplateId") ? "has-error" : "")">
                        @Html.DropDownListFor(m => m.AppCardTemplateId, true, Model.AppCardTemplateId_SelectListItems, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AppCardTemplateId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div id="placeholders-group">
                    @Html.EditorFor(m => m.Placeholders)
                </div>
            }
            @Html.EditorFor(m => m.Description, "HtmlEditor")
            @Html.EditorFor(m => m.TermsConditions, "HtmlEditor")
            <div class="form-group">
                @Html.LabelForRequired(m => m.FontColor, new { @class = "col-sm-4 control-label" })
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.FontColor, Model.FontColors.Select(c => new SelectListItem { Text = c.First().ToString().ToUpper() + c.Substring(1), Value = c }), new { @class = "form-control" })
                </div>
            </div>
            @Html.HiddenFor(m => m.ImageUrl)
            @Html.EditorFor(m => m.Image, new { uploadActionUrl = Url.Action(MVC.Platform.UploadImage(Html.NameFor(m => m.Image).ToString(), Html.NameFor(m => m.ImageUrl).ToString(), Html.IdFor(m => m.ImageUrl).ToString())), imageUrl = Model.ImageUrl, fileUrlField = Html.IdFor(m => m.ImageUrl) })
            @if (AppConfig.Settings.Feature_ContinuousSaving)
            {
                @Html.EditorFor(m => m.IsContinuousSaving, "CustomBoolean", new { readOnly = true })
            }
            @if (AppConfig.Settings.Feature_BalanceMessages)
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.BalanceMessages, new { @class = "col-sm-4 control-label" })
                    <div class="col-sm-8 @hasBalanceMessagesErrors">
                        @Html.TextAreaFor(m => m.BalanceMessages, true, 10, 20, new { @class = "form-control", placeholder = Model.BalanceMessagesPlaceholderText })
                        @Html.ValidationMessageFor(m => m.BalanceMessages, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <button type="submit" class="btn btn-primary" data-action="save">Save</button>
            <button type="submit" class="btn btn-primary" data-action="saveandeditnext">Save and next</button>
        </div>
    </div>
</section>

<script type="text/javascript">
    $(function () { // Shorthand for $(document).ready()
        $("#AppCardTemplateId").change(function() {
            var urlGetPlaceholders = '@Url.Action(MVC.ModifyLoyalty.GetPlaceholders())';
            var paramTemplateId = '@MVC.ModifyLoyalty.GetPlaceholdersParams.templateId';
            $("#placeholders-group").load(urlGetPlaceholders + '?' + paramTemplateId + '=' + $(this).val());
        });
    });
</script>